// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/deployment/v1beta1/groupspec.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/ovrclk/akash/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GroupSpec stores group specifications
type GroupSpec struct {
	Name         string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	Requirements types.PlacementRequirements `protobuf:"bytes,2,opt,name=requirements,proto3" json:"requirements" yaml:"requirements"`
	Resources    []Resource                  `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources" yaml:"resources"`
}

func (m *GroupSpec) Reset()         { *m = GroupSpec{} }
func (m *GroupSpec) String() string { return proto.CompactTextString(m) }
func (*GroupSpec) ProtoMessage()    {}
func (*GroupSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ececffb4dab917c1, []int{0}
}
func (m *GroupSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupSpec.Merge(m, src)
}
func (m *GroupSpec) XXX_Size() int {
	return m.Size()
}
func (m *GroupSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GroupSpec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GroupSpec)(nil), "akash.deployment.v1beta1.GroupSpec")
}

func init() {
	proto.RegisterFile("akash/deployment/v1beta1/groupspec.proto", fileDescriptor_ececffb4dab917c1)
}

var fileDescriptor_ececffb4dab917c1 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbf, 0x4e, 0xc2, 0x50,
	0x14, 0xc6, 0x5b, 0x30, 0x46, 0x8a, 0x83, 0xa9, 0x26, 0x36, 0x0c, 0xbd, 0xe4, 0x26, 0xc6, 0x2a,
	0xc9, 0x6d, 0xc0, 0x8d, 0xb1, 0x31, 0x71, 0x35, 0x75, 0x73, 0xbb, 0xad, 0x27, 0x85, 0xd0, 0x72,
	0xeb, 0xbd, 0xb7, 0x44, 0x7c, 0x02, 0x47, 0x1f, 0x81, 0xcd, 0x57, 0x61, 0x64, 0x74, 0x6a, 0x0c,
	0x2c, 0x86, 0x91, 0x27, 0x30, 0xfd, 0x83, 0x94, 0x81, 0xad, 0xe7, 0xf4, 0x77, 0xce, 0x77, 0xbe,
	0xef, 0x6a, 0x16, 0x1d, 0x51, 0x31, 0xb0, 0x5f, 0x20, 0x0e, 0xd9, 0x34, 0x82, 0xb1, 0xb4, 0x27,
	0x5d, 0x0f, 0x24, 0xed, 0xda, 0x01, 0x67, 0x49, 0x2c, 0x62, 0xf0, 0x49, 0xcc, 0x99, 0x64, 0xba,
	0x91, 0x93, 0x64, 0x47, 0x92, 0x92, 0x6c, 0x5d, 0x04, 0x2c, 0x60, 0x39, 0x64, 0x67, 0x5f, 0x05,
	0xdf, 0xc2, 0xc5, 0x66, 0x8f, 0x0a, 0xf8, 0xdf, 0x49, 0xa5, 0xe4, 0x43, 0x2f, 0x91, 0x50, 0x32,
	0xd7, 0x07, 0xd5, 0x39, 0x08, 0x96, 0x70, 0xbf, 0x04, 0xf1, 0x57, 0x4d, 0x6b, 0x3c, 0x64, 0x07,
	0x3d, 0xc5, 0xe0, 0xeb, 0x1d, 0xed, 0x68, 0x4c, 0x23, 0x30, 0xd4, 0xb6, 0x6a, 0x35, 0x9c, 0xcb,
	0x75, 0x8a, 0xf2, 0x7a, 0x93, 0xa2, 0xe6, 0x94, 0x46, 0x61, 0x1f, 0x67, 0x15, 0x76, 0xf3, 0xa6,
	0xfe, 0xae, 0x9d, 0x72, 0x78, 0x4d, 0x86, 0x1c, 0x32, 0x01, 0x61, 0xd4, 0xda, 0xaa, 0xd5, 0xec,
	0xdd, 0x90, 0xc2, 0x4e, 0x76, 0xde, 0xd6, 0x08, 0x79, 0x0c, 0xa9, 0x9f, 0x53, 0x6e, 0x65, 0xc0,
	0xe9, 0xcc, 0x53, 0xa4, 0xac, 0x53, 0xb4, 0xb7, 0x66, 0x93, 0xa2, 0xf3, 0x42, 0xab, 0xda, 0xc5,
	0xee, 0x1e, 0xa4, 0x07, 0x5a, 0x63, 0x6b, 0x44, 0x18, 0xf5, 0x76, 0xdd, 0x6a, 0xf6, 0x30, 0x39,
	0x94, 0x23, 0x71, 0x4b, 0xd4, 0xb9, 0x2a, 0x15, 0x77, 0xc3, 0x9b, 0x14, 0x9d, 0x6d, 0xe5, 0xca,
	0x16, 0x76, 0x77, 0xbf, 0xfb, 0x27, 0x1f, 0x33, 0xa4, 0xfc, 0xce, 0x90, 0xe2, 0xdc, 0xcf, 0x97,
	0xa6, 0xba, 0x58, 0x9a, 0xea, 0xcf, 0xd2, 0x54, 0x3f, 0x57, 0xa6, 0xb2, 0x58, 0x99, 0xca, 0xf7,
	0xca, 0x54, 0x9e, 0x6f, 0x83, 0xa1, 0x1c, 0x24, 0x1e, 0xf1, 0x59, 0x64, 0xb3, 0x09, 0xf7, 0xc3,
	0x91, 0x5d, 0xc4, 0xff, 0x56, 0x7d, 0x00, 0x39, 0x8d, 0x41, 0x78, 0xc7, 0x79, 0xec, 0x77, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xe8, 0x08, 0x1d, 0x1f, 0x02, 0x00, 0x00,
}

func (m *GroupSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroupspec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Requirements.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGroupspec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGroupspec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroupspec(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroupspec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GroupSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGroupspec(uint64(l))
	}
	l = m.Requirements.Size()
	n += 1 + l + sovGroupspec(uint64(l))
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovGroupspec(uint64(l))
		}
	}
	return n
}

func sovGroupspec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroupspec(x uint64) (n int) {
	return sovGroupspec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GroupSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupspec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupspec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupspec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requirements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroupspec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroupspec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Requirements.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroupspec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroupspec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, Resource{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroupspec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroupspec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroupspec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroupspec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupspec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupspec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroupspec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGroupspec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGroupspec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGroupspec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroupspec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGroupspec = fmt.Errorf("proto: unexpected end of group")
)
